{"metadata":{"title":"Auth Flow","categoryPathComponent":"Welcome-to-FCSDK-iOS","role":"project","category":"SwiftFCSDKSample"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Create-An-Architecture","projects":[{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Architecture","sections":[{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Architecture#Create-a-project"},{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Architecture#Create-an-Architecture"}]}]},{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Design-Our-App","projects":[{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Design-Our-App","sections":[{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Design-Our-App#ContentView"}]}]},{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Let's-Authenticate","projects":[{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate","sections":[{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate#Authentication-UI"},{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate#Authentication-Services"},{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate#Logout"}]}]},{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Making-Calls","projects":[{"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls","sections":[{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls#Initializing-ACBUC"},{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls#Setup-for-CallKit"},{"kind":"task","reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls#Working-With-CallKit"}]}]}],"reference":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS","paths":[["doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS","doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/$volume","doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Let's-Authenticate"]]},"schemaVersion":{"major":0,"minor":1,"patch":0},"kind":"project","identifier":{"url":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate","interfaceLanguage":"swift"},"sections":[{"kind":"hero","title":"Auth Flow","chapter":"Let's Authenticate","estimatedTimeInMinutes":45,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s time to Authenticate. In this chapter, we will import FCSDKiOS and start using it!"}]}]},{"kind":"tasks","tasks":[{"anchor":"Authentication-UI","title":"Authentication UI","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to set up our UI before we start authenticating, so that is exactly what we will do. We want a good user flow, so what we are going to do is create a sheet view to display our auth form."}]}],"mediaPosition":"trailing","media":"cba-logo.png"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Trigger the view that we created called Authentication. What we want to do is set a boolean value that tells the sheet view to be displayed or not to be displayed. We created this boolean in the previous chapter - it is called "},{"type":"strong","inlineContent":[{"type":"text","text":"showSubscriptionsSheet"}]},{"type":"text","text":" We can rename it to something that makes more sense like "},{"type":"strong","inlineContent":[{"type":"text","text":"showAuthenticationSheet"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-001.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Great! Now what we want to do is create the mechanism to present the sheet. Thankfully, Apple has made this really easy with nearly 1 line of code. If you notice inside of our GeometryReader we have a ZStack -> VStack -> ZStack. On the outside of that last ZStack, we want to place our code that will show our sheet. If you notice, when "},{"type":"strong","inlineContent":[{"type":"text","text":"isPresented"}]},{"type":"text","text":" has the binded value of "},{"type":"strong","inlineContent":[{"type":"text","text":"showAuthenticationSheet == true"}]},{"type":"text","text":" then it will fire whatever we have in the closure."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-002.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we want to place a view inside of the closure so that when "},{"type":"strong","inlineContent":[{"type":"text","text":"showAuthenticationSheet"}]},{"type":"text","text":" is true, we will show the view. So, simply place "},{"type":"strong","inlineContent":[{"type":"text","text":"AuthenticationSheet()"}]},{"type":"text","text":" inside the closure."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-003.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, go ahead and run the app, and when you select the Authenticate tab, you should have a working sheet view."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-004.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s go ahead and flush out this view. We are going to build a form. For the UI portion, since we have now been working with UI for a while, go ahead and copy the code from the Sample project, or you can try and come up with some sort of Authentication form on your own, but make sure you compare it with our example to assure it will work. It should look something like this…"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-005.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"So, you may wonder what everything does? "},{"type":"strong","inlineContent":[{"type":"text","text":"$authenticationService"}]},{"type":"text","text":" is a very important part of our Auth Flow. This is an Environmental Object that manages our State for Authentication. So, we need to create this property outside of the body."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-006.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You will also notice some extra properties that I added. We will use these in the future for keeping track of our parent view, which is the "},{"type":"strong","inlineContent":[{"type":"text","text":"ContentView"}]},{"type":"text","text":" and dismissing our sheet when we need to. The next section will deal with our "},{"type":"strong","inlineContent":[{"type":"text","text":"AuthenticationService"}]},{"type":"text","text":" Logic."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-006.png"}]},{"anchor":"Authentication-Services","title":"Authentication Services","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to show you how to handle Async Authentication in FCSDK. What we need to do is create a couple Utilities in order to Authenticate. Inside the Shared Group, create a Directory called Utilities. Inside the Utilities Directory, create a file called "},{"type":"strong","inlineContent":[{"type":"text","text":"NetworkManager.swift"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"NetworkMonitor.swift"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"Keychain.swift"}]},{"type":"text","text":". After you have created those files, go ahead and copy the contents from the sample project into the appropriate files. These files contain the smarts on storing passwords in the keychain, detecting if we are connected to the network or not, and we also have a few different HTTP Managers that can be used in this sample project. Once you have done that, we will be ready to create our AuthenticationService."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a Directory called Services inside the Shared Group, and then inside the Services directory create a swift file called AuthenticationServices.swift."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-007.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we want to create a class called AuthenicationServices, and we want it to conform to "},{"type":"strong","inlineContent":[{"type":"text","text":"NSObject"}]},{"type":"text","text":" and "},{"type":"strong","inlineContent":[{"type":"text","text":"ObservableObject"}]},{"type":"text","text":". We want it to conform to "},{"type":"strong","inlineContent":[{"type":"text","text":"NSObject"}]},{"type":"text","text":" because ACBUC (which is our entry point for the SDK) uses NSObject, so we will also need to conform to it. We want to conform also to "},{"type":"strong","inlineContent":[{"type":"text","text":"ObservableObject"}]},{"type":"text","text":" because we want to observe this class’s properties for any changes."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-008.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First and foremost, what we want to do in our class is create the properties that we will need in order to communicate with our Authentication form. First, "},{"type":"strong","inlineContent":[{"type":"text","text":"import SwiftUI"}]},{"type":"text","text":" at the top of the file. Next, we need 9 variables - username, password, server, port, secureSwitch, useCookies, acceptUntrustedCertificates, sessionID, connectedToSocket. We want to mark each one of these variables as "},{"type":"strong","inlineContent":[{"type":"text","text":"@Published"}]},{"type":"text","text":" because each time the value of these change, we need to publish that value. We are also going to get these values from the UserDefaults so that we do not need to enter them each time we run the app. So, the basic syntax is "},{"type":"strong","inlineContent":[{"type":"text","text":"UserDefaults.standard.{yourPropertyType}(forKey: “SomeKey”)"}]},{"type":"text","text":". We will also get our password from the keychain. You can do that simply by calling "},{"type":"strong","inlineContent":[{"type":"text","text":"KeychainItem.getPassword"}]},{"type":"text","text":". So if you were able to write those properties, great! Make sure they look like the example, and we should be good to move on to the next step."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-009.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, we want to use those properties we just made. If you rememember, inside of our Authentication View, we had a property that reaches inside "},{"type":"strong","inlineContent":[{"type":"text","text":"$authenticationServices"}]},{"type":"text","text":" to access our properties like "},{"type":"strong","inlineContent":[{"type":"text","text":"username"}]},{"type":"text","text":". Each time we enter a character in the text field, it will update in the AuthenticationSerivices class. So we can now use that information and reach out to the network. Let’s write a method that will do that. First, write a block of code that looks like this. Notice, we mark it as async because we want to make this network call conform to that async behavior."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-010.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have done that, we want to create the needed files to write some structures that we can use to pass out data. Inside of the Model directory, create a file called "},{"type":"strong","inlineContent":[{"type":"text","text":"Login"}]},{"type":"text","text":". You can copy the code from the example project to make your file look like this."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-011.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, inside of the ViewModel directory, create a file called "},{"type":"strong","inlineContent":[{"type":"text","text":"LoginViewModel"}]},{"type":"text","text":". You can copy the code from the example project to make your file look like this."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-012.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we need 1 more file in our Utilities directory. We will call it "},{"type":"strong","inlineContent":[{"type":"text","text":"NetworkRepository.swift"}]},{"type":"text","text":". Inside of this file, we can create a class called NetworkRepository and conform it to "},{"type":"strong","inlineContent":[{"type":"text","text":"NSObject"}]},{"type":"text","text":". Next, we want to write a block of code that takes our authentication data and JSONEncodes it so that we can pass it to our network. We also want to build our URL, depending on the options we select, and finally, we want to reach out to our NetworkManager and make the Network Call. So, if you were able to do that on your own, great! If not, not worries! Follow the example as shown here:"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-012.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As you have noticed, I am sure, I had forgotten to mention I created another Directory and File called Response -> LoginResponse. Feel free to create those as well. When we login to the server, it will give us back some data, hence the "},{"type":"strong","inlineContent":[{"type":"text","text":"-> LoginResponse"}]},{"type":"text","text":" on the network call. We need that data it gives us to use FCSDK. So, we are going to do something with that data in the next chapter."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-013.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have our network setup, we can go ahead and pass our data to it. Back inside of AuthenticationServices, we want to write code in our LoginUser method. First, we need to build our credentials from our LoginViewModel -> Login. This follows the MVVM design pattern and allows for the ability to test functionality without touching your model, which can be quite handy. Let’s pass our data to our initialized structures. Second, we want to "},{"type":"strong","inlineContent":[{"type":"text","text":"set"}]},{"type":"text","text":" the properties we have to our "},{"type":"strong","inlineContent":[{"type":"text","text":"UserDefaults"}]},{"type":"text","text":" and "},{"type":"strong","inlineContent":[{"type":"text","text":"Keychain"}]},{"type":"text","text":" so that our app will remember them, and finally, let’s call our Network. If you notice, we start the call with "},{"type":"strong","inlineContent":[{"type":"text","text":"try?"}]},{"type":"text","text":" That is because we can throw an error in this network call, so we have to tell it to try, and if it fails, throw the error. Next, we mark it with “await”. This tells the rest of the method not to perform the next line of code until the network call is complete. This is how we write async methods in Swift >= 5.5. Finally, we make our network call and then set the sessionid to the sessionid we get back from the server."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-014.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, what we want to do is make the network call from our UI. So let’s do that. Move into the Authentication view, and we need a few lines of code to do that. Inside of the MyAppApp file, we need to declare our "},{"type":"strong","inlineContent":[{"type":"text","text":"@StateObject"}]},{"type":"text","text":" property of our "},{"type":"strong","inlineContent":[{"type":"text","text":".environmentObject"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-015.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"While we are at it, let’s go ahead and set our "},{"type":"strong","inlineContent":[{"type":"text","text":"@StateObject"}]},{"type":"text","text":" for our "},{"type":"strong","inlineContent":[{"type":"text","text":"NetworkMonitor"}]}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-016.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open up the "},{"type":"strong","inlineContent":[{"type":"text","text":"Authentication"}]},{"type":"text","text":" View and declare the EnvironmentObject properties for "},{"type":"strong","inlineContent":[{"type":"text","text":"Monitor"}]},{"type":"text","text":" and the "},{"type":"strong","inlineContent":[{"type":"text","text":"AuthenticationServices"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-017.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, we can reach out to the network with a method right below the "},{"type":"strong","inlineContent":[{"type":"text","text":".onAppear"}]},{"type":"text","text":" call. Notice when we reach out to the network, we are passing the connection status of our network. This is important information for us to to give to the "},{"type":"strong","inlineContent":[{"type":"text","text":"Authentication Service"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-018.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, go ahead and call our login method when we click our login button."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-019.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"So… great job! You just successfully made a network call. Next, we will show you how to logout."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Logout","title":"Logout","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We just did a lot of work to authenticate. Now, we have the task of Logging out of our Session. So, let’s go ahead and do that."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside of AuthenticationServices, we want to write another method. This time, we will call it "},{"type":"strong","inlineContent":[{"type":"text","text":"logout()"}]},{"type":"text","text":". We need to do the same thing as before - we want to get our credentials that we have stored and pass them to the network."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-020.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we want to tell FCSDK to stop our current session. So, import the SDK at the top of the file "},{"type":"strong","inlineContent":[{"type":"text","text":"import FCSDK-iOS"}]},{"type":"text","text":". After our credentials have been built, we can call "},{"type":"strong","inlineContent":[{"type":"text","text":"await stopSession()"}]},{"type":"text","text":". This is a method we can create outside of "},{"type":"strong","inlineContent":[{"type":"text","text":"logout()"}]},{"type":"text","text":" method."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-021.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We need to create our "},{"type":"strong","inlineContent":[{"type":"text","text":"ACBUC"}]},{"type":"text","text":" instance, so let’s do that."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-022.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, inside of "},{"type":"strong","inlineContent":[{"type":"text","text":"stopSession()"}]},{"type":"text","text":" we can use the singleton to get the instance and call stop."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-023.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, we want to move into "},{"type":"strong","inlineContent":[{"type":"text","text":"NetworkRepository"}]},{"type":"text","text":" and create our Logout Method. As you can see, we create a method very similar to our login method, except this time, we are using a different network wrapper becuase we don’t need to return a codable object. So, we will use "},{"type":"strong","inlineContent":[{"type":"text","text":"asyncNetworkWrapper"}]},{"type":"text","text":" instead of "},{"type":"strong","inlineContent":[{"type":"text","text":"asyncCodableNetworkWrapper"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-024.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we can call "},{"type":"strong","inlineContent":[{"type":"text","text":"await NetworkRepository.shared.asyncLogout"}]},{"type":"text","text":" after we stop the session. Then, we can set "},{"type":"strong","inlineContent":[{"type":"text","text":"connectedToSocket == false"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-025.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"So, we did it! Great job guys. You may be wondering… how do I logout now that I have the logic? Great question. I will let you create the user interface for logging out. If you follow the sample app, you will see that we have an "},{"type":"strong","inlineContent":[{"type":"text","text":"if"}]},{"type":"text","text":" statement to check if we are authenticated or not, which will present either a Session() View or an Authenticate() View. From Session View, you can create a button that calls the function we just wrote, which should look something like this:"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"authenticate-026.png"}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"FCSDK Calls","abstract":[{"type":"text","text":"We are now ready to start making calls. Up until this point, our tutorial has assumed you possess basic programmming knowledge and knowledge of the Swift Language. Since the purpose of this tutorial is to show you how to use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDKiOS"}]},{"type":"text","text":" we will now go into detail on how you can use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDK"}]},{"type":"text","text":" with the features you have been looking for. Now that you are experts at creating User interfaces, feel free to reference our UI in order to get up and running. We reccommend that when you are creating your UI, you follow ours closely until you understand how you can work with FCSDK in your own UI. In this Chapter we will cover 3 sections:"}]}],"references":{"authenticate-015.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-015.png","variants":[{"url":"\/images\/authenticate-015.png","size":{"width":1398,"height":770},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Make-Calls":{"role":"project","title":"FCSDK Calls","estimatedTime":"1hr 30min","abstract":[{"type":"text","text":"We are now ready to start making calls. Up until this point, our tutorial has assumed you possess basic programmming knowledge and knowledge of the Swift Language. Since the purpose of this tutorial is to show you how to use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDKiOS"}]},{"type":"text","text":" we will now go into detail on how you can use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDK"}]},{"type":"text","text":" with the features you have been looking for. Now that you are experts at creating User interfaces, feel free to reference our UI in order to get up and running. We reccommend that when you are creating your UI, you follow ours closely until you understand how you can work with FCSDK in your own UI. In this Chapter we will cover 3 sections:"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls","kind":"project","type":"topic","url":"\/tutorials\/fcsdkios\/make-calls"},"authenticate-020.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-020.png","variants":[{"url":"\/images\/authenticate-020.png","size":{"width":998,"height":356},"traits":["1x","light"]}]},"authenticate-021.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-021.png","variants":[{"url":"\/images\/authenticate-021.png","size":{"width":1780,"height":886},"traits":["1x","light"]}]},"authenticate-007.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-007.png","variants":[{"url":"\/images\/authenticate-007.png","size":{"width":554,"height":660},"traits":["1x","light"]}]},"authenticate-017.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-017.png","variants":[{"url":"\/images\/authenticate-017.png","size":{"width":1266,"height":346},"traits":["1x","light"]}]},"authenticate-008.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-008.png","variants":[{"url":"\/images\/authenticate-008.png","size":{"width":1808,"height":634},"traits":["1x","light"]}]},"authenticate-024.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-024.png","variants":[{"url":"\/images\/authenticate-024.png","size":{"width":1764,"height":362},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Design-Our-App":{"role":"project","title":"Design Our App","estimatedTime":"15min","abstract":[{"type":"text","text":"This Chapter will give you the principles needed to know how to build SwiftUI Views. Here, we will build what we need in order to create our Authentication View. Please feel free to look at the sample project to finish flushing out your app."}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Design-Our-App","kind":"project","type":"topic","url":"\/tutorials\/fcsdkios\/design-our-app"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Make-Calls#Working-With-CallKit":{"role":"pseudoSymbol","title":"Working With CallKit","abstract":[{"type":"text","text":"We are now ready to start making calls. Up until this point, our tutorial has assumed you possess basic programmming knowledge and knowledge of the Swift Language. Since the purpose of this tutorial is to show you how to use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDKiOS"}]},{"type":"text","text":" we will now go into detail on how you can use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDK"}]},{"type":"text","text":" with the features you have been looking for. Now that you are experts at creating User interfaces, feel free to reference our UI in order to get up and running. We reccommend that when you are creating your UI, you follow ours closely until you understand how you can work with FCSDK in your own UI. In this Chapter we will cover 3 sections:"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls#Working-With-CallKit","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/make-calls#Working-With-CallKit"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/Welcome-to-FCSDK-iOS":{"role":"overview","title":"Build an awesome app using FCSDK-iOS","abstract":[{"type":"text","text":"Making your real time communication a reality with         "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/cbajapan\/fcsdk-ios"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS","kind":"overview","type":"topic","url":"\/tutorials\/welcome-to-fcsdk-ios"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Authenticate":{"role":"project","title":"Auth Flow","estimatedTime":"45min","abstract":[{"type":"text","text":"It’s time to Authenticate. In this chapter, we will import FCSDKiOS and start using it!"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate","kind":"project","type":"topic","url":"\/tutorials\/fcsdkios\/authenticate"},"authenticate-025.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-025.png","variants":[{"url":"\/images\/authenticate-025.png","size":{"width":1662,"height":128},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Authenticate#Authentication-Services":{"role":"pseudoSymbol","title":"Authentication Services","abstract":[{"type":"text","text":"It’s time to Authenticate. In this chapter, we will import FCSDKiOS and start using it!"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate#Authentication-Services","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/authenticate#Authentication-Services"},"authenticate-023.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-023.png","variants":[{"url":"\/images\/authenticate-023.png","size":{"width":902,"height":182},"traits":["1x","light"]}]},"authenticate-011.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-011.png","variants":[{"url":"\/images\/authenticate-011.png","size":{"width":2782,"height":1878},"traits":["1x","light"]}]},"https://github.com/cbajapan/fcsdk-ios":{"title":"FCSDKiOS","titleInlineContent":[{"type":"text","text":"FCSDKiOS"}],"type":"link","identifier":"https:\/\/github.com\/cbajapan\/fcsdk-ios","url":"https:\/\/github.com\/cbajapan\/fcsdk-ios"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Authenticate#Logout":{"role":"pseudoSymbol","title":"Logout","abstract":[{"type":"text","text":"It’s time to Authenticate. In this chapter, we will import FCSDKiOS and start using it!"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate#Logout","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/authenticate#Logout"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Architecture#Create-a-project":{"role":"pseudoSymbol","title":"Create a project","abstract":[{"type":"text","text":"Here we will explain how you may want to consider structuring your application"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Architecture#Create-a-project","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/architecture#Create-a-project"},"authenticate-006.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-006.png","variants":[{"url":"\/images\/authenticate-006.png","size":{"width":1678,"height":1382},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/Welcome-to-FCSDK-iOS/Design-Our-App":{"role":"article","title":"Design Our App","abstract":[],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Design-Our-App","kind":"article","type":"topic","url":"\/tutorials\/welcome-to-fcsdk-ios\/design-our-app"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/Welcome-to-FCSDK-iOS/Let's-Authenticate":{"role":"article","title":"Let's Authenticate","abstract":[],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Let's-Authenticate","kind":"article","type":"topic","url":"\/tutorials\/welcome-to-fcsdk-ios\/let's-authenticate"},"authenticate-022.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-022.png","variants":[{"url":"\/images\/authenticate-022.png","size":{"width":1956,"height":230},"traits":["1x","light"]}]},"authenticate-018.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-018.png","variants":[{"url":"\/images\/authenticate-018.png","size":{"width":1630,"height":380},"traits":["1x","light"]}]},"authenticate-019.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-019.png","variants":[{"url":"\/images\/authenticate-019.png","size":{"width":1170,"height":438},"traits":["1x","light"]}]},"authenticate-001.png":{"alt":"Authenticate Bool","type":"image","identifier":"authenticate-001.png","variants":[{"url":"\/images\/authenticate-001.png","size":{"width":820,"height":236},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Design-Our-App#ContentView":{"role":"pseudoSymbol","title":"ContentView","abstract":[{"type":"text","text":"This Chapter will give you the principles needed to know how to build SwiftUI Views. Here, we will build what we need in order to create our Authentication View. Please feel free to look at the sample project to finish flushing out your app."}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Design-Our-App#ContentView","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/design-our-app#ContentView"},"authenticate-016.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-016.png","variants":[{"url":"\/images\/authenticate-016.png","size":{"width":1302,"height":712},"traits":["1x","light"]}]},"authenticate-004.png":{"alt":"Authenticate initialized","type":"image","identifier":"authenticate-004.png","variants":[{"url":"\/images\/authenticate-004.png","size":{"width":1125,"height":2436},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Architecture#Create-an-Architecture":{"role":"pseudoSymbol","title":"Create an Architecture","abstract":[{"type":"text","text":"Here we will explain how you may want to consider structuring your application"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Architecture#Create-an-Architecture","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/architecture#Create-an-Architecture"},"authenticate-009.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-009.png","variants":[{"url":"\/images\/authenticate-009.png","size":{"width":1540,"height":546},"traits":["1x","light"]}]},"authenticate-003.png":{"alt":"Authenticate initialized","type":"image","identifier":"authenticate-003.png","variants":[{"url":"\/images\/authenticate-003.png","size":{"width":1254,"height":136},"traits":["1x","light"]}]},"authenticate-002.png":{"alt":"Show sheet","type":"image","identifier":"authenticate-002.png","variants":[{"url":"\/images\/authenticate-002.png","size":{"width":1188,"height":140},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/Welcome-to-FCSDK-iOS/Making-Calls":{"role":"article","title":"Making Calls","abstract":[],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Making-Calls","kind":"article","type":"topic","url":"\/tutorials\/welcome-to-fcsdk-ios\/making-calls"},"authenticate-010.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-010.png","variants":[{"url":"\/images\/authenticate-010.png","size":{"width":920,"height":456},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Make-Calls#Setup-for-CallKit":{"role":"pseudoSymbol","title":"Setup for CallKit","abstract":[{"type":"text","text":"We are now ready to start making calls. Up until this point, our tutorial has assumed you possess basic programmming knowledge and knowledge of the Swift Language. Since the purpose of this tutorial is to show you how to use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDKiOS"}]},{"type":"text","text":" we will now go into detail on how you can use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDK"}]},{"type":"text","text":" with the features you have been looking for. Now that you are experts at creating User interfaces, feel free to reference our UI in order to get up and running. We reccommend that when you are creating your UI, you follow ours closely until you understand how you can work with FCSDK in your own UI. In this Chapter we will cover 3 sections:"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls#Setup-for-CallKit","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/make-calls#Setup-for-CallKit"},"authenticate-012.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-012.png","variants":[{"url":"\/images\/authenticate-012.png","size":{"width":2182,"height":984},"traits":["1x","light"]}]},"authenticate-005.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-005.png","variants":[{"url":"\/images\/authenticate-005.png","size":{"width":1678,"height":1382},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/Welcome-to-FCSDK-iOS/Create-An-Architecture":{"role":"article","title":"Create An Architecture","abstract":[],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/Welcome-to-FCSDK-iOS\/Create-An-Architecture","kind":"article","type":"topic","url":"\/tutorials\/welcome-to-fcsdk-ios\/create-an-architecture"},"authenticate-014.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-014.png","variants":[{"url":"\/images\/authenticate-014.png","size":{"width":1728,"height":1006},"traits":["1x","light"]}]},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Authenticate#Authentication-UI":{"role":"pseudoSymbol","title":"Authentication UI","abstract":[{"type":"text","text":"It’s time to Authenticate. In this chapter, we will import FCSDKiOS and start using it!"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Authenticate#Authentication-UI","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/authenticate#Authentication-UI"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Architecture":{"role":"project","title":"Structure Your app","estimatedTime":"30min","abstract":[{"type":"text","text":"Here we will explain how you may want to consider structuring your application"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Architecture","kind":"project","type":"topic","url":"\/tutorials\/fcsdkios\/architecture"},"doc://com.cba-japan.Swift-FCSDK-iOS/tutorials/FCSDKiOS/Make-Calls#Initializing-ACBUC":{"role":"pseudoSymbol","title":"Initializing ACBUC","abstract":[{"type":"text","text":"We are now ready to start making calls. Up until this point, our tutorial has assumed you possess basic programmming knowledge and knowledge of the Swift Language. Since the purpose of this tutorial is to show you how to use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDKiOS"}]},{"type":"text","text":" we will now go into detail on how you can use "},{"type":"emphasis","inlineContent":[{"type":"text","text":"FCSDK"}]},{"type":"text","text":" with the features you have been looking for. Now that you are experts at creating User interfaces, feel free to reference our UI in order to get up and running. We reccommend that when you are creating your UI, you follow ours closely until you understand how you can work with FCSDK in your own UI. In this Chapter we will cover 3 sections:"}],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/tutorials\/FCSDKiOS\/Make-Calls#Initializing-ACBUC","kind":"section","type":"section","url":"\/tutorials\/fcsdkios\/make-calls#Initializing-ACBUC"},"cba-logo.png":{"alt":"CBA Logo","type":"image","identifier":"cba-logo.png","variants":[{"url":"\/images\/cba-logo.png","size":{"width":170,"height":157},"traits":["1x","light"]}]},"authenticate-013.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-013.png","variants":[{"url":"\/images\/authenticate-013.png","size":{"width":1678,"height":1208},"traits":["1x","light"]}]},"authenticate-026.png":{"alt":"Auth Form","type":"image","identifier":"authenticate-026.png","variants":[{"url":"\/images\/authenticate-026.png","size":{"width":1200,"height":972},"traits":["1x","light"]}]}}}