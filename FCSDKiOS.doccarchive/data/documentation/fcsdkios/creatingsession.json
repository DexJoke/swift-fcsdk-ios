{"primaryContentSections":[{"kind":"content","content":[{"anchor":"ACBUC-is-the-entry-point-for-FCSDK-clients.-One-very-important-factor-is-that-after-we-authenticate-our-User,-the-server-sends-back-a-SessionID-in-the-response.-We-need-this-SessionID-in-order-to-create-our-Session-Object-(ACBUC-Object).-So,-without-further-ado,-lets-do-that.","level":3,"type":"heading","text":"ACBUC is the entry point for FCSDK clients. One very important factor is that after we authenticate our User, the server sends back a SessionID in the response. We need this SessionID in order to create our Session Object (ACBUC Object). So, without further ado, letâ€™s do that."},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside of our Login Request Method, where we receive the response, we want to do something with that response."}]},{"anchor":"Handle-Response-Object","level":2,"type":"heading","text":"Handle Response Object"},{"type":"codeListing","syntax":"swift","code":["class AuthenticationService: NSObject, ObservableObject {","","\/\/ Add these 3 properties to the file","@Published var sessionID = \"\"","@Published var connectedToSocket = false","@Published var acbuc: ACBUC?","    ","    override init(){}","","func loginUser(networkStatus: Bool) async {","","\/\/ We Create our credentials and then made our call","","let payload = try? await NetworkRepository.shared.asyncLogin(loginReq: loginCredentials)","","\/\/ Now let's do stuff with our response","","\/\/ Set SessionID with our SessionID we get back in the payload","self.sessionID = payload?.sessionid ?? \"\"","\/\/ Create the Session","await self.createSession(sessionid: payload?.sessionid ?? \"\", networkStatus: networkStatus)","\/\/ Set the connected to Socket status","self.connectedToSocket = self.acbuc?.connection != nil","","}"]},{"anchor":"Create-Session","level":2,"type":"heading","text":"Create Session"},{"type":"codeListing","syntax":"swift","code":["","\/\/\/ Create the Session","\/\/\/ - Parameters:","\/\/\/   - sessionid: The SessionID we get back from the Server.","\/\/\/   - networkStatus: The Network status from our Network Monitor."," func createSession(sessionid: String, networkStatus: Bool) async {","","\/\/ Initialize the ACBUC Object with our SessionID and set the Delegate","     self.acbuc = ACBUC.uc(withConfiguration: sessionid, delegate: self)","","\/\/ Tell the object if the network is reachable or not","     self.acbuc?.setNetworkReachable(networkStatus)","","\/\/ Tell the object if we accept any certificate from the server","     let acceptUntrustedCertificates = UserDefaults.standard.bool(forKey: \"Secure\")","     self.acbuc?.acceptAnyCertificate(acceptUntrustedCertificates)","","\/\/ Tell the object if we are going to use cookies","     let useCookies = UserDefaults.standard.bool(forKey: \"Cookies\")","     self.acbuc?.useCookies = useCookies","","\/\/ Start the Session","     self.acbuc?.startSession()","}"]},{"anchor":"Stop-Session","level":2,"type":"heading","text":"Stop Session"},{"type":"codeListing","syntax":"swift","code":["","\/\/\/ Stop the Session","    func stopSession() async {","        self.acbuc?.stopSession()","    }","}"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/fcsdkios\/creatingsession"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/documentation\/FCSDKiOS\/CreatingSession","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Here we will create our FCSDK Session in order to start using the SDK."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Create a ACBUC Session","role":"article","modules":[{"name":"FCSDKiOS"}]},"hierarchy":{"paths":[["doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/documentation\/FCSDKiOS"]]},"references":{"doc://com.cba-japan.Swift-FCSDK-iOS/documentation/FCSDKiOS":{"role":"collection","title":"FCSDKiOS","abstract":[],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/documentation\/FCSDKiOS","kind":"symbol","type":"topic","url":"\/documentation\/fcsdkios"}}}