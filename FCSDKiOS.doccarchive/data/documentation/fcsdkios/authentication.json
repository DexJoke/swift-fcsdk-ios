{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Authentication is the entry point of an FCSDK-iOS app. Previously, in older versions of FCSDK-iOS, we would start an Auth process by importing "},{"type":"codeVoice","code":"ACBClientSDK"},{"type":"text","text":". Starting in FCSDK-iOS 4.0.0 we have clarified what you import with what the SDK is called. For unification and clarity, you will now import FCSDK-iOS with "},{"type":"codeVoice","code":"import FCSDKiOS"},{"type":"text","text":". Great! Now that we have discussed that, we can talk now about Authentication."}]},{"anchor":"Authenticating-a-User-and-its-Session","level":2,"type":"heading","text":"Authenticating a User and it’s Session"},{"anchor":"For-authenticating-a-user,-we-want-to-use-URLSession.-Previously,-we-had-used-NSURLConnection.-You-will-be-happy-to-know-and-hear-that-we-are-now-using-URLSession-in-our-Sample-app.-An-Authentication-process-has-six-parts-to-it.","level":3,"type":"heading","text":"For authenticating a user, we want to use URLSession. Previously, we had used NSURLConnection. You will be happy to know and hear that we are now using URLSession in our Sample app. An Authentication process has six parts to it."},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"URLRequest"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"HTTPCookies"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"URLSessionConfiguration"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"URLSession"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"HTTPURLResponse"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"URLSessionDelegate"}]}]}]},{"anchor":"Network-Manager","level":2,"type":"heading","text":"Network Manager"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now this may sound like a lot, but it is fairly simple and straightforward. The code block below will explain more."}]},{"type":"codeListing","syntax":"swift","code":["class NetworkManager: NSObject, ObservableObject, URLSessionDelegate {","","static let shared = NetworkManager()","","","\/\/\/ Async Network Wrapper","\/\/\/ - Parameters:","\/\/\/   - urlString: The URLString to your Server.","\/\/\/   - httpMethod: The HTTP Method Type.","\/\/\/   - httpBody: The Body to send in a request.","\/\/\/   - headerField: A header field you can choose to add.","\/\/\/   - headerValue: The header field's value.","func asyncNetworkWrapper(","urlString: String,","httpMethod: String,","httpBody: Data? = nil,","headerField: String = \"\",","headerValue: String = \"\"",") async throws {","\/\/ Add your URL String","let url = URL(string: urlString)","var request = URLRequest(url: url!)","\/\/ Set HTTPMethod","request.httpMethod = httpMethod","","\/\/ Send body if we are a POST or PUT","if httpMethod == \"POST\" || httpMethod == \"PUT\" {","request.httpBody = httpBody","}","","\/\/ Set the JSON Header type.","request.addValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","","\/\/ Pass cookies if we want cookies","let allCookies = HTTPCookieStorage.shared.cookies","\/\/ We can also delete cookies","for cookie in allCookies ?? [] {","HTTPCookieStorage.shared.deleteCookie(cookie)","}","","\/\/ Create the Configuration","let configuration = URLSessionConfiguration.default","\/\/ Let's start our session","\/\/\/ - Parameters:","\/\/\/   - configuration: The URLSessionConfiguration we just set up.","\/\/\/   - delegate: We need to set the URL Session delegate to our self for Server Authentication protocol.","\/\/\/   - delegateQueue: Set the delegate queue to the main operation queue.","let session = URLSession(configuration: configuration, delegate: self, delegateQueue: OperationQueue.main)","","\/\/ Let's wait for our response","let (_, response) = try await session.data(for: request)","","\/\/ Check for failure","guard let httpResponse = response as? HTTPURLResponse else {","throw NetworkErrors.requestFailed(\"unvalid response\")","}","\/\/ Check for 200 response status code otherwise throw an error","guard httpResponse.statusCode == 200 else {","throw NetworkErrors.responseUnsuccessful(\"status code \\(httpResponse.statusCode)\")","}","}","}"]},{"anchor":"Network-Repository","level":2,"type":"heading","text":"Network Repository"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Great! Now that you have made it this far, we can use our NetworkWrapper and give it the needed data. Let’s create a Network Repository. With this repository, we can call the method in our service that we will create shorty."}]},{"type":"codeListing","syntax":"swift","code":["class NetworkRepository: NSObject {","","static let shared = NetworkRepository()","","\/\/\/ - Parameters:","\/\/\/   - loginReq: This is a model that we will feed to our request that contains all the needed data for the auth process.","func asyncLogin(loginReq: LoginViewModel) async throws -> LoginResponse {","","\/\/ Decide if we are https or not","let scheme = loginReq.secureSwitch ? \"https\" : \"http\"","","\/\/ Set our URL","let url = \"\\(scheme):\/\/\\(loginReq.server):\\(loginReq.port)\/csdk-sample\/SDK\/login\"","","\/\/ Encode our LoginRequest Object","let body = try? JSONEncoder().encode(loginReq.requestLoginObject())","","\/\/Make Network Request and handle the response","var data: LoginResponse?","do {","data = try await NetworkManager.shared.asyncCodableNetworkWrapper(type: LoginResponse.self, urlString: url, httpMethod: \"POST\", httpBody: body)","} catch {","print(error)","}","guard let d = data else { throw Errors.nilResponseError }","return d","}","","}"]},{"anchor":"Model-Layer","level":2,"type":"heading","text":"Model Layer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, you may be wondering what LoginViewModel is. This is an Object with the needed properties that we will pass during our auth flow. We will use the MVVM pattern for this example."}]},{"type":"codeListing","syntax":"swift","code":["struct Login: Codable {","    var username: String","    var password: String","    var server: String","    var port: String","    var secureSwitch: Bool","    var useCookies: Bool","    var acceptUntrustedCertificates: Bool","}","","class LoginViewModel {","","    var login: Login","    ","    init(login: Login) {","        self.login = login","    }","    var username: String {","        return self.login.username","    }","    ","    var password: String {","        return self.login.password","    }","    ","    var server: String {","        return self.login.server","    }","    ","    var port: String {","        return self.login.port","    }","    ","    var secureSwitch: Bool {","        return self.login.secureSwitch","    }","    ","    var useCookies: Bool {","        return self.login.useCookies","    }","    ","    var acceptUntrustedCertificates: Bool {","        return self.login.acceptUntrustedCertificates","    }","    ","    func requestLoginObject() -> LoginRequest {","        return LoginRequest(username: self.username, password: self.password)","    }","}",""]},{"anchor":"URLSessionDelegate","level":2,"type":"heading","text":"URLSessionDelegate"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have one more thing to do in our Network Manager before our setup is done and we can make the Network Request. We need to conform to "},{"type":"codeVoice","code":"URLSessionDelegate"},{"type":"text","text":" for the Server Authentication process. So, inside of Newtork Manager, add this code. In simple terms, the server will give us an authentication challenge that we need to respond to so that is excactly what we will do. Your server may be set up slightly different, so you may need to adjust accordingly."}]},{"type":"codeListing","syntax":"swift","code":["func urlSession(","    _","    session: URLSession,","    didReceive challenge: URLAuthenticationChallenge,","    completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?","    ) -> Void) {","    ","    if challenge.protectionSpace.serverTrust == nil {","        completionHandler(.useCredential, nil)","    } else {","        let trust: SecTrust = challenge.protectionSpace.serverTrust!","        let credential = URLCredential(trust: trust)","        completionHandler(.useCredential, credential)","    }","}"]},{"anchor":"Authentication-Seriveces","level":2,"type":"heading","text":"Authentication Seriveces"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we can make the auth call. Inside of your Authentication Service, or perhaps you will make the call from a ViewController and handle the call there, you can write code something like this."}]},{"type":"codeListing","syntax":"swift","code":["","\/\/ ObservableObject is only used in SwiftUI","class AuthenticationService: NSObject, ObservableObject {","    ","    override init(){}","    ","\/\/@Published variables are only used in SwiftUI","    @Published var username = UserDefaults.standard.string(forKey: \"Username\") ?? \"\"","    @Published var password = KeychainItem.getPassword","    @Published var server = UserDefaults.standard.string(forKey: \"Server\") ?? \"\"","    @Published var port = UserDefaults.standard.string(forKey: \"Port\") ?? \"\"","    @Published var secureSwitch = UserDefaults.standard.bool(forKey: \"Secure\")","    @Published var useCookies = UserDefaults.standard.bool(forKey: \"Cookies\")","    @Published var acceptUntrustedCertificates = UserDefaults.standard.bool(forKey: \"Trust\")","","@MainActor","func loginUser(networkStatus: Bool) async {","    let loginCredentials = LoginViewModel(login:","                                            Login(","                                                username: username,","                                                password: password,","                                                server: server,","                                                port: port,","                                                secureSwitch: secureSwitch,","                                                useCookies: useCookies,","                                                acceptUntrustedCertificates: acceptUntrustedCertificates","                                            ))","    ","    ","    UserDefaults.standard.set(username, forKey: \"Username\")","    KeychainItem.savePassword(password: password)","    UserDefaults.standard.set(server, forKey: \"Server\")","    UserDefaults.standard.set(port, forKey: \"Port\")","    UserDefaults.standard.set(secureSwitch, forKey: \"Secure\")","    UserDefaults.standard.set(useCookies, forKey: \"Cookies\")","    UserDefaults.standard.set(acceptUntrustedCertificates, forKey: \"Trust\")","    ","    let payload = try? await NetworkRepository.shared.asyncLogin(loginReq: loginCredentials)","}","}"]},{"anchor":"SwiftUI-Example","level":2,"type":"heading","text":"SwiftUI Example"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example of how you can make this call from a SwiftUI View."}]},{"type":"codeListing","syntax":"swift","code":["","struct Authentication: View {","    ","    @State private var username = \"\"","    @State private var password = \"\"","    @State private var server = \"\"","    @State private var port = \"\"","    @State private var setSecurity = true","    @State private var setCookies = true","    @State private var setTrust = true","","\/\/ EnvironmentObject are defined on the @main App entry point and are classes created in other files ","","\/\/ We use Network Monitor in order to determine if we are connected to the Network or Not ","    @EnvironmentObject var monitor: NetworkMonitor","","\/\/ Our Authentication Service we created earlier, we must initialize this class first in @main App","    @EnvironmentObject private var authenticationService: AuthenticationService","","    ","    var parentTabIndex: Int","    ","    var body: some View {","        NavigationView  {","            Form {","                Section(header: Text(\"Credentials\")) {","                    VStack(alignment: .leading) {","                        Text(\"User\")","                            .bold()","                        TextField(\"Enter Username...\", text: $authenticationService.username)","                        Divider()","                        Text(\"Password\")","                            .bold()","                        SecureField(\"Enter Password...\", text: $authenticationService.password)","                        Text(\"Server\")","                            .bold()","                        TextField(\"Enter Server Name...\", text: $authenticationService.server)","                        Text(\"Port\")","                            .bold()","                        TextField(\"8443...\", text: $authenticationService.port)","                        ","                    }","                }","                Section {","                    VStack(alignment: .leading) {","                        Toggle(\"Security\", isOn: $authenticationService.secureSwitch)","                        Toggle(\"Use Cookies\", isOn: $authenticationService.useCookies)","                        Toggle(\"Trust All Certs.\", isOn: $authenticationService.acceptUntrustedCertificates)","                    }","                }","                Button {","                    Task {","                         \/\/ The trigger to fire our call","                        await self.login()","                    }","                } label: {","                    Text(\"Login\")","                }","                .buttonStyle(.borderless)","            }","            .navigationBarTitle(\"Authentication\")","        }","    }","","    private func login() async {","        await self.authenticationService.loginUser(networkStatus: monitor.networkStatus())","    }","}"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/fcsdkios\/authentication"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/documentation\/FCSDKiOS\/Authentication","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This article will discuss the Authentication flow for FCSDK-iOS."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Authentication","role":"article","modules":[{"name":"FCSDKiOS"}]},"hierarchy":{"paths":[["doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/documentation\/FCSDKiOS"]]},"references":{"doc://com.cba-japan.Swift-FCSDK-iOS/documentation/FCSDKiOS":{"role":"collection","title":"FCSDKiOS","abstract":[],"identifier":"doc:\/\/com.cba-japan.Swift-FCSDK-iOS\/documentation\/FCSDKiOS","kind":"symbol","type":"topic","url":"\/documentation\/fcsdkios"}}}